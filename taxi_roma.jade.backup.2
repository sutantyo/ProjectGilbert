extend layout
block content


	style(type='text/css').
		html,body,#taxi-anim {
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0 20px 0 30px;
		}
		#taxi-animation{
			position: absolute
		}

	.page-header
		h2 Roma taxi
			small &nbsp animation of crawdad data

	#taxi-anim
	script.
		// Create the map 
		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {
			zoom: 18,
			center: new google.maps.LatLng(41.8975,12.4694),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});

		var padding = 0;

		var frameLimit = 100;
		var frame = 1;
		var framePause = 10;

		var startTime = new Date(2000,1,1,0,0,0,0);
		var endTime = new Date(2000,1,1,0,0,15,0);

		var taxis = new Array();
		var lookup = {};


		d3.json('/taxi_roma/all', function(error,data){
			if (error)
				console.error('error retrieving JSON data' + error);
			data.forEach(function(d){
				taxis.push({ id: d.id, x: 0, y: 0});
			});
			for (var i = 0, len = taxis.length; i < len; i++){
				lookup[taxis[i].id]=taxis[i];
			}
		
			var overlay = new google.maps.Over	
			


				d3.json('/taxi_roma/time?start=' + startTime.toTimeString().substr(0,2) + 'h' +
																									 startTime.toTimeString().substr(3,2) + 'm' +
																									 startTime.toTimeString().substr(6,2) + 's&end=' +
																									 endTime.toTimeString().substr(0,2) + 'h' + 
																									 endTime.toTimeString().substr(3,2) + 'm' + 
																									 endTime.toTimeString().substr(6,2) + 's', 
				function(error,data)
				{
					if(error) 
						console.error('error retrieving JSON data' + error);
					data.forEach(function(d){
							taxis.push({id :d.id, x:d.x, y:d.y});
					});

					for (var i = 0, len = taxis.length; i < len; i++){
						lookup[taxis[i].id]=taxis[i];
					}

					var overlay = new google.maps.OverlayView();
					overlay.onAdd = function() {
							var layer = d3.select(this.getPanes().overlayLayer).append('div')
						overlay.draw = function() {
							var projection = this.getProjection();
							var markers = layer.selectAll('svg')
								.data(taxis)
								.each(transform)
								.enter().append('svg:svg')
								.each(transform)
								.attr('class','marker')
								.attr('id','taxi-animation');
							markers.append('svg:circle')
								.attr({
										cx:7,
										cy:7,
										r: 5,
										'stroke' : 'black',
										'stroke-width' : '2px',
										'fill': function(d){
												return 'rgb(' + ((d.id*89) % 256) + ',' + ((d.id*57) % 256) + ',' + ((d.id*17) % 256) + ')';
										}
								});
							function transform(d) {
								console.log(d.x);
								console.log(d.y);
								var padding = 0;
								d = new google.maps.LatLng(d.x, d.y);
								d = projection.fromLatLngToDivPixel(d);
								console.log(d);
								return d3.select(this)
								.style("left", (d.x - padding) + "px")
								.style("top", (d.y - padding) + "px");
							}
						};
					};
					overlay.setMap(map);
				});

			/*
			svg.selectAll('circle')
					.data(taxis)
					.enter()
					.append('circle')
					.attr({
							cx: function(d) { return xScale(d.x) },
							cy: function(d) { return yScale(d.y) },
							r: 3,
							'fill': function(d){
									return 'rgb(' + ((d.id*89) % 256) + ',' + ((d.id*57) % 256) + ',' + ((d.id*17) % 256) + ')';
							},
							'class': function(d,i){
									return 'taxi-'+ d.id;
							},
							'opacity': 0
						});
			//updatePoints();	
			*/


		/*
		function updatePoints()
		{	
			console.log(frame);
			if (frame++ > frameLimit){
				return;
			}
			else
			{
				d3.json('/taxi_roma/time?start=' + startTime.toTimeString().substr(0,2) + 'h' +
																							 startTime.toTimeString().substr(3,2) + 'm' +
																							 startTime.toTimeString().substr(6,2) + 's&end=' +
																							 endTime.toTimeString().substr(0,2) + 'h' + 
																							 endTime.toTimeString().substr(3,2) + 'm' + 
																							 endTime.toTimeString().substr(6,2) + 's', 
					function(error,data){
						if(error) 
							console.error('error retrieving JSON data' + error);
						
						data.forEach(function(d){
							lookup[d.id].x = d.x;
							lookup[d.id].y = d.y;
							//console.log('Data for ' + d.id + '. Updated ' + lookup[d.id] + ' from ' + lookup[d.id].x + ' to ' + d.x);
						});
					//increment time for next dataset
						startTime.setSeconds(startTime.getSeconds()+15);
						endTime.setSeconds(endTime.getSeconds()+15);
						drawPoints()
						updatePoints();
					}); //end query

			}
		}

		function drawPoints(){

			var dots = svg.selectAll('circle')
										.data(taxis)
										.transition()
										.attr({
											cx: function(d) { return xScale(d.x) },
											cy: function(d) { return yScale(d.y) },
											r: 3,
											'opacity': 100,
											'fill': function(d){
													return 'rgb(' + ((d.id*89) % 256) + ',' + ((d.id*57) % 256) + ',' + ((d.id*17) % 256) + ')';
											}
										});
		}
				
		*/
