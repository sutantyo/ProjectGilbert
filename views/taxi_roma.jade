extend layout
block content


	style(type='text/css').
		html,body,#taxi-anim {
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0 20px 0 30px;
		}
		#taxi-animation{
			position: absolute
		}

	.page-header
		h2 Roma taxi
			small &nbsp animation of crawdad data

	#taxi-anim
	script.

		// create a map 
		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {
			zoom: 18,
			center: new google.maps.LatLng(41.8975,12.4694),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});

		var padding = 0;

		// parameters to control the animation
		var frameLimit = 1000;
		var frame = 1;
		var framePause = 10;
		var startTime = new Date(2000,1,1,0,0,0,0);
		var endTime = new Date(2000,1,1,0,0,15,0);

		var taxis = new Array();
		var lookup = {};



		// initial call
		d3.json('/taxi_roma/all', function(error,data){
			if (error) console.error('error retrieving list of taxis: ' + error);

			_init(data);
			console.log('obtained list of taxis');
			taxiGPS.prototype = new google.maps.OverlayView();
			var taxiLayer = new taxiGPS();
			
			// bind the overlay to the map (thus calling overlay.onAdd)
			taxiLayer.setMap(map);
			_updatePoints(taxiLayer);
		});

		function _updatePoints(taxiLayer){
			console.log('starting to update points');
			d3.json('/taxi_roma/time?start=' + startTime.toTimeString().substr(0,2) + 'h' +
																									 startTime.toTimeString().substr(3,2) + 'm' +
																									 startTime.toTimeString().substr(6,2) + 's&end=' +
																									 endTime.toTimeString().substr(0,2) + 'h' + 
																									 endTime.toTimeString().substr(3,2) + 'm' + 
																									 endTime.toTimeString().substr(6,2) + 's', 
				function(error,data)
				{
					console.log('Drawing frame ' + frame );
					data.forEach(function(d){
						lookup[d.id].x = d.x;
						lookup[d.id].y = d.y;	
						lookup[d.id].active = true;
					});

					taxiLayer.update();

					startTime.setSeconds(startTime.getSeconds()+15);
					endTime.setSeconds(endTime.getSeconds()+15);
					if (frame++ < frameLimit)
						_updatePoints(taxiLayer);
			}); // end d3.json


		};

		function _init(data){
				data.forEach(function(d){
						taxis.push({id :d.id, x:d.x, y:d.y});
				});

				for (var i = 0, len = taxis.length; i < len; i++){
					lookup[taxis[i].id]=taxis[i];
				}
		};


		function taxiGPS(){

			var _projection;
			var _div;

			function transform(d) {
						var padding = 0;
						d = new google.maps.LatLng(d.x, d.y);
						d = _projection.fromLatLngToDivPixel(d);
						return d3.select(this)
						.style("left", (d.x - padding) + "px")
						.style("top", (d.y - padding) + "px");
			}

			this.onAdd = function() {
				_div = d3.select(this.getPanes().overlayLayer).append('div')
				console.log("called onAdd");
			};

			this.onRemove = function() {
				console.log("called remove");
				_div.remove();
			};

			this.update = function(){
				console.log("called update");

				_div.selectAll('svg')
					.data(taxis).each(transform);

			}; // end this.update


			this.draw = function() {
				console.log("called draw");
				_projection = this.getProjection();
				console.log(_div);
				console.log(taxis);
				var markers = _div.selectAll('svg')
					.data(taxis)
					.each(transform)
					.enter().append('svg')
					.each(transform)
					.attr('class','marker')
					.attr('id','taxi-animation');
				markers.append('svg:circle')
					.attr({
							cx:7,
							cy:7,
							r: 5,
							'stroke' : 'black',
							'stroke-width' : '2px',
							'fill': function(d){
									return 'rgb(' + ((d.id*89) % 256) + ',' + ((d.id*57) % 256) + ',' + ((d.id*17) % 256) + ')'
							},
							'opacity': function(d){
									if (d.active) 
										return 100; 
									else 
										return 100;
							}
					});
				console.log('done draw');
			};

		}


	

