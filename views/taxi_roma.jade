extend layout_taxi
append additional_header

append content

	.page-header
		h2 Roma Taxi
			small &nbsp animation of crawdad data

	.container-fluid
		.row.no-gutter#data-panel
			.col-sm-4
				div
					.title-box.button.btn.btn-default.button-full-width Start Time 
				div
					select.selectpicker.map-input.start-month(data-width='35%')#map-input-start-month
					select.selectpicker.map-input.start-day(data-width='30%')#map-input-start-day
					select.selectpicker.map-input.start-time(data-width='35%')#map-input-start-time
			.col-sm-4
				div.input-title
					.title-box.button.btn.btn-default.button-full-width Current Time
				.button.btn.btn-default.button-full-width#map-info-time 00:00:00
			.col-sm-4
				div.input-title
					.title-box.button.btn.btn-default.button-full-width End Time
				div
					select.selectpicker.map-input.end-month(data-width='35%')#map-input-end-month
					select.selectpicker.map-input.end-day(data-width='30%')#map-input-end-day
					select.selectpicker.map-input.end-time(data-width='35%')#map-input-end-time

		.row.row-eq-height.no-gutter#info-panel
			.col-md-1.col-sm-1.col-xs-0.hidden-xs.input-title
				.title-box.button.btn.btn-default.button-full-width Interval
			.col-md-1.col-sm-1.col-xs-3
				select.selectpicker(data-width='100%')#map-input-interval
			.col-md-1.col-sm-1.col-xs-0.hidden-xs.input-title
				.title-box.button.btn.btn-default.button-full-width Radius
			.col-md-1.col-sm-1.col-xs-3
				input.form-control#map-input-radius(type=text,value=100)
			.col-md-2.col-sm-2.col-xs-6
				.button.btn.btn-default.button-full-width#map-label-button Label
			.col-md-2.col-sm-2.col-xs-6
				.button.clicked.btn.btn-default.button-full-width#map-edge-button Edges
			.col-md-4.col-sm-4.col-xs-12
				.button.btn.btn-default.button-full-width#map-generate-button Generate
				.button.btn.btn-default.button-half-width#map-start-button(style='display:none') Start 
				.button.btn.btn-default.button-full-width#map-stop-button(style='display:none')  Stop
				.button.btn.btn-default.button-half-width#map-reset-button(style='display:none') Reset
	#taxi-anim

	.page-header
		h2 Data charts
			small &nbsp 
	
	.container-fluid
		.row.no-gutter#chart-info-panel
			.col-md-4.col-sm-6.col-xs-12
				div
					.title-box.button.btn.btn-default(style='width:20%') Start
					select.selectpicker.start-month(data-width='25%')#chart-input-start-month
					select.selectpicker.start-day(data-width='25%')#chart-input-start-day
					select.selectpicker.start-time(data-width='30%')#chart-input-start-time
			.col-md-4.col-sm-6.col-xs-12
				div
					.title-box.button.btn.btn-default(style='width:20%') End
					select.selectpicker.end-month(data-width='25%')#chart-input-end-month
					select.selectpicker.end-day(data-width='25%')#chart-input-end-day
					select.selectpicker.end-time(data-width='30%')#chart-input-end-time
			.col-md-2.col-sm-2.col-xs-6
				.title-box.button.btn.btn-default.button-full-width Type
			.col-md-2.col-sm-2.col-xs-6
				select.selectpicker(data-width='100%')#chart-input-type
					option(value='degrees') degrees
					option(value='diameters') diameters
					option(value='components') components
			.col-md-2.col-sm-2.col-xs-6
				.title-box.button.btn.btn-default.button-full-width Interval
			.col-md-2.col-sm-2.col-xs-6
				select.selectpicker(data-width='100%')#chart-input-interval
			.col-md-2.col-sm-2.col-xs-6
				.title-box.button.btn.btn-default.button-full-width Radius
			.col-md-2.col-sm-2.col-xs-6
				input.form-control#chart-input-radius(type=text,value=100)
			.col-md-2.col-sm-2.col-xs-6
				.title-box.button.btn.btn-default.button-full-width Max
			.col-md-2.col-sm-2.col-xs-6
				input.form-control#chart-input-max(type=text,value=150)
			.col-md-offset-8.col-md-4.col-sm-12.col-xs.12
				.button.btn.btn-default.button-full-width#chart-generate-button Generate

	#taxi-data

	script.

		// parameters specific to Taxi Roma dataset:
		// ... the earliest timestamp is 1391212800, 
		// ... the latest timestamp is 1393804798,

		// boundary points for our svg
		var boundaries = [ {id : 'NW', x: 42.23961, y: 12.04925},
								  		{id : 'NE', x: 42.23961, y: 12.85368},
								  		{id : 'SE', x: 41.65899, y: 12.85368},
								  		{id : 'SW', x: 41.65899, y: 12.04925} ];


		// boundary points for our svg

		var available_year = 2014;
		var available_dates = [  {month: 'February',  min_date: '1', max_date: '28'},
														 {month: 'March', min_date: '1',  max_date: '2'} ];
		var available_times = [	'00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00',
													  '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00',
														'16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00' ];
		var recommended_intervals = [ 15, 30, 45, 60 ];


		// create a map 
		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {
			zoom: 14,
			center: new google.maps.LatLng(41.90759354,12.48991750),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});
		var styles = [ {stylers: [{ hue: '#e0dce8' }, { saturation: -60 }, { lightness: 60}] }];
		map.setOptions({styles: styles});


		var data_url = '/dataset/taxi_roma_epoch/';
		var data_chunk_size = 3600;


		function generate_taxi_animation(start_time,end_time,radius,interval)
		{

			var overlay = new OverlayView();
			overlay.setTransitionTime(1000);
			overlay.setBoundaries(boundaries);
			overlay.setMap(map);

			// Set some parameters for the overlay animation (e.g. transition time), 
			// these methods are in our inherited class
			animation_parameters = { animation_start_time : start_time, 
															 animation_end_time		: end_time,
															 animation_step				: parseInt(interval),
															 data_url							: data_url,
															 data_chunk						: data_chunk_size,
															 radius								: radius
														};	
			var anim = new TaxiAnimation(overlay, animation_parameters);
			//anim.animation_loop();


			return new Promise (function(resolve,reject){
				d3.json(data_url + 'time?start=' + start_time + '&end=' + (start_time+data_chunk_size), function(error,data){
					if (error) reject('Error getting initial data' + error);
					else
					{
						anim.active_data = data;
						if (start_time+data_chunk_size <= end_time)
						{
							d3.json(data_url + 'time?start=' + (start_time+data_chunk_size) + '&end=' + (start_time+2*data_chunk_size), function(error,data){
								if (error) reject('Error getting initial data' + error);
								else
								{
									anim.next_set_of_data = data;
									resolve(anim);
								}
							});
						}
						else
						{
							resolve(anim);
						}
					}
				});
			});
		}

		function generate_taxi_chart(start_time,end_time,type,radius,interval,max_value)
		{

			var chart_div = d3.select('#taxi-data');
			var chart_svg = chart_div.append('svg')
				.attr('height',400)
				.attr('width',function(){return (end_time-start_time)/interval + 200;});

			chart_parameters = { chart_start_time : start_time,
													 chart_end_time   : end_time,
													 chart_interval   : parseInt(interval),
													 chart_type				: type,
													 chart_radius     : parseInt(radius),
													 data_url					: data_url,
													 data_chunk_size  : data_chunk_size,
													 data_max_value   : parseInt(max_value),
													 svg 							: chart_svg,
													 svg_height				: 400
												 };

			var chart_drawer = new TaxiChartDrawer(chart_parameters);

			return new Promise (function(resolve,reject){
				d3.json(data_url + 'time?start=' + start_time + '&end=' + (start_time+data_chunk_size), function(error,data){
					if (error) reject('Error getting initial data' + error);
					else
					{
						chart_drawer.active_data = data;
						if (start_time+data_chunk_size <= end_time)
						{
							d3.json(data_url + 'time?start=' + (start_time+data_chunk_size) + '&end=' + (start_time+2*data_chunk_size), function(error,data){
								if (error) reject('Error getting initial data' + error);
								else
								{
									chart_drawer.next_set_of_data = data;
									resolve(chart_drawer);
								}
							});
						}
						else
						{
							resolve(chart_drawer);
						}
					}
				});
			});	

		}
