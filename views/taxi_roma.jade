extend layout

block additional_header

	script(src='/js/overlay.js', charset='utf-8')
	script(src='/js/graph.js', charset='utf-8')


block content


	style(type='text/css').
		html,body,#taxi-anim {
			width: 100%;
			height: 90%;
			margin: 0;
			padding: 0 20px 0 30px;
		}
		.marker, .coverage, .boundaries{
			position: absolute
		}
		.line{
			position: absolute;
		}

	.page-header
		h2 Roma Taxi
			small &nbsp animation of crawdad data

	#info-panel
		.row
			.col-md-3
				h3 Time
					span#info-time.large
			.col-md-3
			.col-md-3
			.col-md-3
				button.button#start-button Start
				button.button#stop-button Stop

	#taxi-anim
	script.

		

		// parameters to control the animation
		var frameLimit = 40;
		var frame = 1;
		
		var framePause = 800;
		var frameTransition = framePause-50;

		var proceed = false;

		// parameters specific to Taxi SF dataset:
		// ... the earliest timestamp is 1211018404, 17-May-2008 10:00:04 
		// ... the latest timestamp is 1213089934, 6-June-2008 09:25:34
		// ... if the timestamp is GMT, then subtract 8 for SF

		var startTime = new Date(2000,1,1,12,0,0,0);
		var endTime = new Date(2000,1,1,12,0,15,0);

		// boundary points for our svg
		var boundary_points = [ {id : 'NW', x: 42.23961, y: 12.04925},
											  		{id : 'NE', x: 42.23961, y: 12.85368},
											  		{id : 'SE', x: 41.65899, y: 12.85368},
											  		{id : 'SW', x: 41.65899, y: 12.04925} ];

		// parameters for the graph
		var coverageRadius = 500;

		// container (and lookup table) for the data, i.e. GPS location of taxis
		var _graph_nodes = [];
		var _graph_edges = [];

		// create a map 
		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {
			zoom: 14,
			center: new google.maps.LatLng(41.90759354,12.48991750),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});
		var styles = [ {stylers: [{ hue: '#e0dce8' }, { saturation: -60 }, { lightness: 60}] }];
		map.setOptions({styles: styles});

		// extend Google Maps' OverlayView class and create a new OverlayView object
		OverlayView.prototype = new google.maps.OverlayView();
		var overlay = new OverlayView();

		// bind the overlay to the map (thus calling overlay.onAdd)
		overlay.setMap(map);
		overlay.setTransitTime(frameTransition);

		// start the chain
		d3.select('#info-time').text('  ' + startTime.toTimeString().substr(0,8));
		var refreshID = setInterval(function(){
			console.log(frame);
			if ( proceed == true)
			{
				_updatePoints(overlay)

				startTime.setSeconds(startTime.getSeconds()+15);
				endTime.setSeconds(endTime.getSeconds()+15);
				d3.select('#info-time').text('  ' + startTime.toTimeString().substr(0,8));
				if (++frame > frameLimit)
					clearInterval(refreshID);
			}
		},framePause);
			


		function _updatePoints(overlay){
			d3.json('/taxi_roma/time?start=' + startTime.toTimeString().substr(0,2) + 'h' +
																									 startTime.toTimeString().substr(3,2) + 'm' +
																									 startTime.toTimeString().substr(6,2) + 's&end=' +
																									 endTime.toTimeString().substr(0,2) + 'h' + 
																									 endTime.toTimeString().substr(3,2) + 'm' + 
																									 endTime.toTimeString().substr(6,2) + 's', 
				function(error,data)
				{
					//console.log('Frame: ' + frame + ' start time: ' + startTime);
					_graph_nodes.length = 0;
					_graph_edges.length = 0;

					var _duplicate_check = [];
					data.forEach(function(datum){
						if (_duplicate_check.indexOf(datum.id) == -1)	
						{
							//if (datum.id == 352 || datum.id == 234 || datum.id == 37 || datum.id == 310 || datum.id == 322)
							{
							//console.log('Data: ' + '(' + datum.x + ',' + datum.y + ')');
								_graph_nodes.push({id: datum.id, x: Number(datum.x), y: Number(datum.y), neighbours: []});
								_duplicate_check.push(datum.id);
							}
						}
					});
					_graph_findNeighbours();

					graphs.length = 0;
					_graph_buildGraph();

					/*
					graphs.forEach(function(graph,i){
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
						});
						//console.log('Graph ' + i + ':' + list_of_node);
					});
					*/
					
					graphs.forEach(function(graph,i){
						var graph_size = graph.length;
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
							if (graph_size > 15)
								node.color = '#ff0000';
							else if (graph_size > 13)
								node.color = '#a81662';
							else if (graph_size > 9)
								node.color = '#c94b8c';
							else if (graph_size > 5)
								node.color = '#d870e6';
							else if (graph_size > 1)
								node.color = '#a370e6';
							else
								node.color = 'gray';
						});
						//console.log('Graph ' + i + ', size ' + graph.length + ' :' + list_of_node);
					});
					
					overlay.nodes = _graph_nodes;
					overlay.edges = _graph_edges;
					overlay.update();
			}); // end d3.json
		};




		



