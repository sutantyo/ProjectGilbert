extend layout_taxi
append additional_header

append content

	.page-header
		h2 Roma Taxi
			small &nbsp animation of crawdad data

	.row#data-panel
		.col-sm-5
			div
				| &nbsp start time
			div
				select.selectpicker(data-width='25%')#start-month
					option(value=1) one
					option(value=2) two
					option(value=3) three
				select.selectpicker(data-width='15%')#start-day
					option(value=1) one
					option(value=2) two
					option(value=3) three
				select.selectpicker(data-width='60%')#start-time
		.col-sm-2
			div
				| month day
			div
				span#info-time.large 
		.col-sm-5
			div
				| &nbsp end time
			div
				select.selectpicker(data-width='25%')#end-month
					option(value=1) one
					option(value=2) two
					option(value=3) three
				select.selectpicker(data-width='15%')#end-day
					option(value=1) one
					option(value=2) two
					option(value=3) three
				select.selectpicker(data-width='60%')#end-time


	.row#info-panel
		.col-md-3.col1
			| placeholder
		.col-md-3.col2
			| placeholder
		.col-md-3.col3
			| placeholder
		.col-md-3.col5
			button.button#start-button Start
			button.button#stop-button(style='display:none') Stop
			button.button#reset-button Reset
	#taxi-anim


	script.

		// parameters to control the animation
		var frameLimit = 5;
		var frame = 1;
		
		var framePause = 2000;
		var frameTransition = framePause-100;

		var proceed = false;

		// parameters specific to Taxi Roma dataset:
		// ... the earliest timestamp is 1391212800, 
		// ... the latest timestamp is 1393804798,

		var time_increments = 15;
		var startTime = 1391212800;
		var endTime = startTime + time_increments;

		// boundary points for our svg
		var boundary_points = [ {id : 'NW', x: 42.23961, y: 12.04925},
											  		{id : 'NE', x: 42.23961, y: 12.85368},
											  		{id : 'SE', x: 41.65899, y: 12.85368},
											  		{id : 'SW', x: 41.65899, y: 12.04925} ];

		// parameters for the graph
		var coverageRadius = 500;

		// container (and lookup table) for the data, i.e. GPS location of taxis
		var _graph_nodes = [];
		var _graph_edges = [];

		// create a map 
		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {
			zoom: 14,
			center: new google.maps.LatLng(41.90759354,12.48991750),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});
		var styles = [ {stylers: [{ hue: '#e0dce8' }, { saturation: -60 }, { lightness: 60}] }];
		map.setOptions({styles: styles});

		// extend Google Maps' OverlayView class and create a new OverlayView object
		OverlayView.prototype = new google.maps.OverlayView();
		var overlay = new OverlayView();

		// bind the overlay to the map (thus calling overlay.onAdd)
		overlay.setMap(map);
		overlay.setTransitTime(frameTransition);

		// start the chain
		d3.select('#info-time').text('  ' + startTime.toTimeString().substr(0,8));
		
		function mainLoop()
		{
			_updatePoints(overlay);

			startTime = endTime+1;
			endTime = endTime + time_increments;
			currentTime = new Date(endTime*1000);
			d3.select('#info-time').text('  ' +	currentTime.toTimeString().substr(0,8));
		}


		/*
		function _gatherData()
		{

			var graph = new TaxiGraph();
		
			//d3.json ....
			{
				var _duplicate_check = [];
				data.forEach(
			}

		}
		*/


		function _updatePoints(overlay){
			d3.json('/dataset/taxi_roma_epoch/time?start=' + startTime + '&end=' + endTime, function(error,data)
				{
					//console.log('Frame: ' + frame + ' start time: ' + startTime);
					_graph_nodes.length = 0;
					_graph_edges.length = 0;

					var _duplicate_check = [];
					data.forEach(function(datum){
						if (_duplicate_check.indexOf(datum.id) == -1)	
						{
							//if (datum.id == 352 || datum.id == 234 || datum.id == 37 || datum.id == 310 || datum.id == 322)
							{
							//console.log('Data: ' + '(' + datum.x + ',' + datum.y + ')');
								_graph_nodes.push({id: datum.id, x: Number(datum.x), y: Number(datum.y), neighbours: []});
								_duplicate_check.push(datum.id);
							}
						}
					});
					_graph_findNeighbours();

					graphs.length = 0;
					var a = performance.now();
					_graph_buildGraph();
					var b = performance.now();
					console.log('Buildgraph: ' + (b-a));


					graphs.forEach(function(graph,i){
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
						});
						console.log('Graph ' + i + ':' + list_of_node);
						console.log('... diameter: ' + graph.diameter);
					});
					
					graphs.forEach(function(graph,i){
						var graph_size = graph.length;
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
							if (graph_size > 15)
								node.color = '#ff0000';
							else if (graph_size > 13)
								node.color = '#a81662';
							else if (graph_size > 9)
								node.color = '#c94b8c';
							else if (graph_size > 5)
								node.color = '#d870e6';
							else if (graph_size > 1)
								node.color = '#a370e6';
							else
								node.color = 'gray';
						});
						//console.log('Graph ' + i + ', size ' + graph.length + ' :' + list_of_node);
					});
					
					overlay.nodes = _graph_nodes;
					overlay.edges = _graph_edges;
					overlay.update();
			}); // end d3.json
		};




		



