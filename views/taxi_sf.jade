extend layout_taxi
append additional_header

append content



	.page-header
		h2 San Fransisco
			small &nbsp animation of crawdad data

	.row#info-panel
		.col-md-3
			h3 Time
				span#info-time.large
		.col-md-3
		.col-md-3
		.col-md-1
		.col-md-2
			button.button#start-button Start
			button.button#stop-button(style='display:none') Stop
			button.button#reset-button Reset
	#taxi-anim
	script.

		// parameters to control the animation
		var frameLimit = 100;
		var frame = 1;
				
		var framePause = 2000;
		var frameTransition = framePause-50;


		// parameters specific to Taxi SF dataset:
		// ... the earliest timestamp is 1211018404, 17-May-2008 10:00:04 
		// ... the latest timestamp is 1213089934, 6-June-2008 09:25:34
		// ... if the timestamp is GMT, then subtract 8 for SF

		var min_time = 1211018404;
		var max_time = 1213089934;
		var chunk_size = 3600;
		var data_collection_interval = 60;

		var time_increments = 60;
		var start_time = min_time;
		var end_time = start_time + time_increments;

		// boundary points for our svg
		var boundary_points = [ {id : 'NW', x: 37.99999, y: -122.56000},
											  		{id : 'NE', x: 37.99999, y: -122.00000},
											  		{id : 'SE', x: 37.20000, y: -122.00000},
											  		{id : 'SW', x: 37.20000, y: -122.56000} ];

		// parameters for the graph
		var coverageRadius = 300;

		// container (and lookup table) for the data, i.e. GPS location of taxis
		var _graph_nodes = [];
		var _graph_edges = [];

		// create a map 
		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {
			zoom: 15,
			center: new google.maps.LatLng(37.7833,-122.4167),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});
		var styles = [ {stylers: [{ hue: '#e0dce8' }, { saturation: -60 }, { lightness: 60}] }];
		map.setOptions({styles: styles});

		// extend Google Maps' OverlayView class and create a new OverlayView object
		OverlayView.prototype = new google.maps.OverlayView();
		var overlay = new OverlayView();

		// bind the overlay to the map (thus calling overlay.onAdd)
		overlay.setMap(map);
		overlay.setTransitTime(frameTransition);
		// start the chain

		var currentTime = new Date(end_time*1000);
		d3.select('#info-time').text('  ' +	currentTime.toTimeString().substr(0,8));

		gatherData();

		function mainLoop()
		{
			_updatePoints(overlay);

			start_time = end_time+1;
			end_time = end_time + time_increments;
			currentTime = new Date(end_time*1000);
			d3.select('#info-time').text('  ' +	currentTime.toTimeString().substr(0,8));
		}	

		function gatherData()
		{
			d3.json('/dataset/taxi_sf_epoch/time?start=' + start_time + '&end=' + (start_time + chunk_size), function(error,data)
			{
				if (error) return console.log('Error getting json data: ' + error);
			
				var perfA = performance.now();	
				console.log(data.length);
				var loc_pointer = 0;	
				for (var i = 0; i < 60; i++)
				{

					var current_batch = [];
					for (var j = 0; j < data.length; j++)
					{
						if ( data[j].time < (start_time + (i+1) * 60) )
							current_batch.push(data[j]);
						else
						{
							data.splice(0,j);
							break;
						}
					}

					_graph_nodes.length = 0;

					var _duplicate_check = [];
					current_batch.forEach(function(datum){
						if (_duplicate_check.indexOf(datum.id) == -1)	
						{
								_graph_nodes.push({id: datum.id, x: Number(datum.x), y: Number(datum.y), neighbours: []});
								_duplicate_check.push(datum.id);
						}
					});


					_graph_findNeighbours();
					graphs.length = 0;
					_graph_buildGraph();

					var neighbours_count = [];
					var total_neighbours = 0;
					_graph_nodes.forEach(function(node){
						neighbours_count.push(node.neighbours.length);
						total_neighbours = total_neighbours + node.neighbours.length
					});
					//console.log("Number of nodes: " + _graph_nodes.length);
					//console.log("...average neighbours: " + total_neighbours/_graph_nodes.length);

					//console.log("Number of components: " + graphs.length);
					var diameters = [];
					var total_diameter = 0;
					var component_sizes = [];
					var total_component_sizes = 0;
					graphs.forEach(function(graph){
						diameters.push(graph.diameter);
						total_diameter = total_diameter + graph.diameter;
						component_sizes.push(graph.length);
						total_component_sizes =  total_component_sizes + graph.length;
					});
					//console.log("Average diameter: " + total_diameter / graphs.length);
					//console.log("Average size " + total_component_sizes / graphs.length);

				}
				var perfB = performance.now();
				console.log("Time taken: " + (perfB-perfA));
			});
		}

		function _updatePoints(overlay){
			d3.json('/dataset/taxi_sf_epoch/time?start=' + start_time + '&end=' + end_time, function(error,data)
				{
					//console.log('Frame: ' + frame + ' start time: ' + startTime);
					_graph_nodes.length = 0;
					_graph_edges.length = 0;

					var _duplicate_check = [];
					data.forEach(function(datum){
						if (_duplicate_check.indexOf(datum.id) == -1)	
						{
								_graph_nodes.push({id: datum.id, x: Number(datum.x), y: Number(datum.y), neighbours: []});
								_duplicate_check.push(datum.id);
						}
					});
					_graph_findNeighbours();

					graphs.length = 0;
					_graph_buildGraph();

					graphs.forEach(function(graph,i){
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
						});
						//console.log('Graph ' + i + ':' + list_of_node);
						//console.log('... diameter: ' + graph.diameter);
					});
					
					graphs.forEach(function(graph,i){
						var graph_size = graph.length;
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
							if (graph_size > 15)
								node.color = '#ff0000';
							else if (graph_size > 13)
								node.color = '#a81662';
							else if (graph_size > 9)
								node.color = '#c94b8c';
							else if (graph_size > 5)
								node.color = '#d870e6';
							else if (graph_size > 1)
								node.color = '#a370e6';
							else
								node.color = 'gray';
						});
						//console.log('Graph ' + i + ', size ' + graph.length + ' :' + list_of_node);
					});
					
					overlay.nodes = _graph_nodes;
					overlay.edges = _graph_edges;
					overlay.update();
			}); // end d3.json
		};



