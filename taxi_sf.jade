extend layout
block content


	style(type='text/css').
		html,body,#taxi-anim {
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0 20px 0 30px;
		}
		.marker, .coverage{
			position: absolute
		}
		.ligne{
			position: absolute
		}

	.page-header
		h2 Roma taxi
			small &nbsp animation of crawdad data

	#taxi-anim
	script.

		// parameters to control the animation
		var frameLimit = 2000;
		var frame = 1;
		var framePause = 10;
		var startTime = new Date(2000,1,1,12,0,0,0);
		var endTime = new Date(2000,1,1,12,0,15,0);


		// parameters for the graph
		var coverageRadius = 1000;

		// container (and lookup table) for the data, i.e. GPS location of taxis
		var taxis = [];
		var edges = [];

		// create a map 
		

		var map = new google.maps.Map(d3.select("#taxi-anim").node(), {

			zoom: 15,
			center: new google.maps.LatLng(41.8975,12.4694),
			//center: new google.maps.LatLng(41.8835,12.4974),
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});
		var styles = [ {stylers: [{ hue: '#e0dce8' }, { saturation: -60 }, { lightness: 60}] }];
		map.setOptions({styles: styles});

		taxiGPS.prototype = new google.maps.OverlayView();
		var taxiLayer = new taxiGPS();
		// bind the overlay to the map (thus calling overlay.onAdd)
		taxiLayer.setMap(map);
		// start the chain

		setTimeout(function(){_updatePoints(taxiLayer);},500);

		function _updatePoints(taxiLayer){
			d3.json('/taxi_roma/time?start=' + startTime.toTimeString().substr(0,2) + 'h' +
																									 startTime.toTimeString().substr(3,2) + 'm' +
																									 startTime.toTimeString().substr(6,2) + 's&end=' +
																									 endTime.toTimeString().substr(0,2) + 'h' + 
																									 endTime.toTimeString().substr(3,2) + 'm' + 
																									 endTime.toTimeString().substr(6,2) + 's', 
				function(error,data)
				{
					//console.log('Frame: ' + frame + ' start time: ' + startTime);
					taxis.length = 0;

					var _duplicate_check = [];
					data.forEach(function(datum){
						if (_duplicate_check.indexOf(datum.id) == -1)	
						{
							//if (datum.id == 352 || datum.id == 234 || datum.id == 37 || datum.id == 310 || datum.id == 322)
							{
							//console.log('Data: ' + '(' + datum.x + ',' + datum.y + ')');
								taxis.push({id: Number(datum.id), x: Number(datum.x), y: Number(datum.y), neighbours: []});
								_duplicate_check.push(datum.id);
							}
						}
					});
					_graph_findNeighbours();

					graphs.length = 0;
					_graph_buildGraph();

					/*
					graphs.forEach(function(graph,i){
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
						});
						//console.log('Graph ' + i + ':' + list_of_node);
					});
					*/
					
					graphs.forEach(function(graph,i){
						var graph_size = graph.length;
						var list_of_node = '';
						graph.forEach(function(node){
							list_of_node = list_of_node + ' ' + node.id;
							if (graph_size > 15)
								node.color = '#ff0000';
							else if (graph_size > 13)
								node.color = '#a81662';
							else if (graph_size > 9)
								node.color = '#c94b8c';
							else if (graph_size > 5)
								node.color = '#d870e6';
							else if (graph_size > 1)
								node.color = '#a370e6';
							else
								node.color = 'gray';
						});
						//console.log('Graph ' + i + ', size ' + graph.length + ' :' + list_of_node);
					});
					
					taxiLayer.update();

					startTime.setSeconds(startTime.getSeconds()+15);
					endTime.setSeconds(endTime.getSeconds()+15);
					if (frame++ < frameLimit)
					{
						setTimeout(function(){_updatePoints(taxiLayer);},100);
					}
			
			}); // end d3.json
		};


		function taxiGPS(){

			var _projection;
			var _div;
			var _div2;

			var x_padding = 62;
			var y_padding = -56;

			function transformCoord(d){
				var LatLng = new google.maps.LatLng(d.x, d.y);
				var position = _projection.fromLatLngToDivPixel(LatLng);
				return position;
			}

			function transform(d) {
				var position = transformCoord(d);
				return d3.select(this)
				.style("left", position.x-x_padding + "px")
				.style("top", position.y+y_padding + "px")
			}

			function drawCoverages(d){
				var dy = convertMtoLL(coverageRadius*2);
				var LatLng1 = new google.maps.LatLng(d.x, d.y);
				var LatLng2 = new google.maps.LatLng(d.x, d.y + dy);

				var position1 = _projection.fromLatLngToDivPixel(LatLng1);
				var position2 = _projection.fromLatLngToDivPixel(LatLng2);

				var radius = position2.x - position1.x;

				d3.select(this)
					.style("left", position1.x - radius/2 + "px")
					.style("top", position1.y - radius/2 + "px")
					.attr({
						height: radius,
						width: radius,
					});
					
				var lines = d3.select(this).selectAll('line').data(d.neighbours);
				lines.enter().append('line');
				lines.attr({
						'x1' : function(d){
											return radius/2;
										},
						'y1' : function(d){
											return radius/2;
										},
						'x2' : function(d){
											return transformCoord(d).x - position1.x + radius/2;
											//return transformCoord(d).x;
										},
						'y2' : function(d){
											return transformCoord(d).y - position1.y + radius/2;
											//return transformCoord(d).y;
										},
					  'style' : 'stroke-width:2',
						'style' : function(d){return 'stroke:'+d.color} 
					});
				lines.exit().remove();

			}

			this.onAdd = function() {
				_div  = d3.select(this.getPanes().overlayLayer).append('div').attr('id','node-layer');
				_div2 = d3.select(this.getPanes().overlayLayer).append('div').attr('id','edge-layer');
			};

			this.onRemove = function() {
				//_div.remove();
				//_div2.remove();
			};

			this.update = function(){

				var coverages = _div2.selectAll('svg').data(taxis).each(drawCoverages);
				var enteringCoverages = coverages.enter().append('svg').each(drawCoverages).attr('class','coverage');
				coverages.exit().remove();


				var markers = _div.selectAll('svg').data(taxis, function(d){return d.id} ).each(transform)

				//coverages.append('g').each(drawEdges);

				// update entering items
				var enteringTaxis = markers.enter().append('svg').each(transform)
					.attr({ 'height' : 100, 'width' : 100, 'class' : 'marker', 'id' : function(d){return 'taxi-animation-'+d.id} })

				enteringTaxis.append('circle')
					.attr({
						'cx' : 62, 'cy' : 56, 'r' : 20,
						'fill' : function(d){return d.color},
						})
				
				markers.select('circle')
					.attr({
						'cx' : 62, 'cy' : 56, 'r' : 5,
						'fill' : function(d){return d.color}
						})
				markers.exit().remove();

				/*
				enteringTaxis.append('text')
					.attr({
						'x': function(d){ 
							if (d.id < 10) return 50 + 8;
							else if (d.id < 100) return 50 + 6;
							else return 50 + 3;
						},
						'y':50 + 16,
						'dy':'.45em',
						'fill': 'black'//function(d){
								//return getContrast50(d.id)}
					})
					.text(function(d){ return d.id })
					*/

			}; // end this.update


			this.draw = function() {
				_projection = this.getProjection();
				this.update();
					
			};

		}


		// Find the distance (in metres) between two coordinates on the map
		function convertLLtoM(lat1, lon1, lat2, lon2) {
			var R = 6378.137
			var a = 
				 0.5 - Math.cos((lat2 - lat1) * Math.PI / 180)/2 + 
				 Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
				 (1 - Math.cos((lon2 - lon1) * Math.PI / 180))/2;

			return 1000 * R * 2 * Math.asin(Math.sqrt(a));
		}

		// Convert a distance in metres into change in longitudinal coordinate
		// 
		// We are doing something very lazy here: at the equator, 1 longitudinal degree
		// is roughly 111,320 metres, so conversely, 1 metre is about 0.0000089831118
		function convertMtoLL(m) {
			return (m * 0.00000893831118);
		}


		// Graph-related codes

		var graphs = [];

		function _graph_findNeighbours()
		{
			for (var i = 0; i < taxis.length; i++)
			{
				for (var j = 0; j < taxis.length; j++)
				{
					if (i != j)
					{
						if (convertLLtoM(taxis[i].x,taxis[i].y,taxis[j].x,taxis[j].y) < coverageRadius)
						{
							if (taxis[i].neighbours.indexOf(taxis[j]) == -1)
							{
								taxis[i].neighbours.push(taxis[j]);
								edges.push({origin: taxis[i].id, dest: taxis[j].id});
							}
						}
					}
				}
			}
		}

		function _graph_buildGraph()
		{
			var queue = [];
			var set = [];

			for (var i = 0; i < taxis.length; i++)
			{
				var current_graph = [];

				if (set.indexOf(taxis[i]) == -1)
				{
					queue.push(taxis[i]);
					set.push(taxis[i]);	
					current_graph.push(taxis[i]);
					while (queue.length > 0)
					{
						var q_head = queue.shift();
						q_head.neighbours.forEach(
							function(neighbour){
								if (set.indexOf(neighbour) == -1)
								{
									queue.push(neighbour);
									set.push(neighbour);
									current_graph.push(neighbour);
								}
							});
						if (queue.length == 0)
						{
							graphs.push(current_graph);
						}
					}
				}


			}

			// assign colors to the graphs based on number of nodes
		}

		function getContrast50(id){
				var r = id*89%256;
				var g = id*57%256;
				var b = id*17%256; 
				var yiq = ((r*299)+(g*587)+(b*114))/1000;
				return (yiq >= 128) ? 'black' : 'white';
		}	




